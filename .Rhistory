InsectSprays
head(InsectSprays)
fit4~glm(count~as.factor(spray),data=InsectSprays,family=poisson)
summary(fit4)
fit4~glm(count~as.factor(spray),data=InsectSprays,family=poisson)
fit4~glm(count~as.factor(spray),data=InsectSprays,family="poisson"")
fit4~glm(count~as.factor(spray),data=InsectSprays,family="poisson")
fit4~glm(count~factor(spray),data=InsectSprays,family="poisson")
fit<- glm(count~factor(spray)-1,family="poisson",data=InsectSprays)
fit4<-glm(count~factor(spray),data=InsectSprays,family="poisson")
fit4<-glm(count~as.factor(spray),data=InsectSprays,family=poisson)
fit4<-glm(count~factor(spray)-1,data=InsectSprays,family=poisson)
summary(fit4)
summary(fit4)$coef
summary(fit4)$coef[1]/summary(fit4)$coef[2]
exp(summary(fit4)$coef[1]/summary(fit4)$coef[2])
exp(summary(fit4)$coef[1])/exp(summary(fit4)$coef[2])
log(10)
ln(10)
exp(log(10))
?offset
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x=x,y=y)
y6<-y[y>0]
y6
y6<-y[6:11]
y6
x6<-x[6:11]
y6<-y[6:11]
x6<-x[6:11]
fit6<-lm(y6~x6)
summary(fit6)
z <- (x > 0) * x
fit <- lm(y ~ x + z)
sum(coef(fit)[2:3])
summary(fit)
z
(x > 0)
x+z
y
mtcars
?mtcars
fitmt<-(mpg~am)
summary(fitmt)
fitmt<-lm(mpg~am)
fitmt<-lm(mpg~am,mtcars)
summary(fitmt)
fitmt<-lm(mpg~am-1,mtcars)
summary(fitmt)
fitmt<-lm(mpg~am,mtcars)
summary(fitmt)
library(ggplot2)
g<-ggplot(data=mtcars,aes(x=mpg,...))
?aes
g<-ggplot(data=mtcars,aes(x=wt,y=mpg,colour=am))
g<-ggplot(data=mtcars,aes(x=wt,y=mpg,colour=am))+geom_boxplot()
g
g<-ggplot(data=mtcars,aes(x=wt,y=mpg,group=am))+geom_boxplot()
g
g<-ggplot(data=mtcars,aes(x=wt,y=mpg,group=as.factor(am))+geom_boxplot()
g<-ggplot(data=mtcars,aes(x=wt,y=mpg,group=as.factor(am)+geom_boxplot()
g<-ggplot(data=mtcars,aes(x=wt,y=mpg,group=as.factor(am)))+geom_boxplot()
g
g<-ggplot(data=mtcars,aes(x=wt,group=as.factor(am)))+geom_boxplot()
g
g<-ggplot(data=mtcars,aes(x=wt,y=as.factor(am)))+geom_boxplot()
g
g<-ggplot(data=mtcars,aes(x=wt,y=am)+geom_boxplot()
g<-ggplot(data=mtcars,aes(x=wt,y=am))+geom_boxplot()
g
g<-ggplot(data=mtcars,aes(y=mpg,y=am))+geom_boxplot()
g
g<-ggplot(data=mtcars,aes(y=mpg,x=am))+geom_boxplot()
g
g<-ggplot(data=mtcars,aes(y=mpg,group=am))+geom_boxplot()
g
g<-ggplot(data=mtcars,aes(y=mpg,x=am,fill=))+geom_boxplot()
mtcars
names(mtcars)
g<-ggplot(data=mtcars,aes(y=mpg,x=am,fill=factor(cyl)))+geom_boxplot()
g
g<-ggplot(data=mtcars,aes(y=mpg,x=factor(am),fill=factor(cyl)))+geom_boxplot()
g
g<-ggplot(data=mtcars,aes(y=mpg,x=factor(am),fill=factor(cyl)))+geom_smooth()
g
g<-ggplot(data=mtcars,aes(y=mpg,x=factor(am),fill=factor(cyl)))+geom_point()
g
g<-ggplot(data=mtcars,aes(y=mpg,x=factor(am),colour=factor(cyl)))+geom_point()
g
g<-ggplot(data=mtcars,aes(y=mpg,x=disp,colour=factor(am)))+geom_point()
g
pairs(mpg~.,mtcars)
pairs(mpg~am+wt,mtcars)
pairs(mpg~am+wt,disp,mtcars)
pairs(mpg~am+wt+disp,mtcars)
g<-ggplot(data=mtcars,aes(y=mpg,x=disp,colour=factor(am)))+geom_point()
g
g<-ggplot(data=mtcars,aes(y=mpg,x=disp,colour=am))+geom_point()
g
g<-ggplot(data=mtcars,aes(y=mpg,x=disp,colour=factor(am))+geom_point()
g<-ggplot(data=mtcars,aes(y=mpg,x=disp,colour=factor(am)))+geom_point()+geom_smooth()
g
g<-ggplot(data=mtcars,aes(y=mpg,x=wt,colour=factor(am)))+geom_point()+geom_smooth()
g
g<-ggplot(data=mtcars,aes(y=mpg,x=wt,colour=factor(am)))+geom_point()+geom_abline()
g
pairs(mpg~.,mtcars)
dim(mtcars)
nrow(mtcars)
g<-ggplot(data=mtcars,aes(y=mpg,x=factor(am),fill=factor(cyl)))+geom_boxplot()
g
g<-ggplot(data=mtcars,aes(y=mpg,x=factor(am))+geom_boxplot()
g<-ggplot(data=mtcars,aes(y=mpg,x=factor(am)))+geom_boxplot()
g
g<-ggplot(data=mtcars,aes(y=mpg,x=factor(am)))+geom_point()
g
g<-ggplot(data=mtcars,aes(y=mpg,x=factor(am)))+geom_point()+jitter()
g<-ggplot(data=mtcars,aes(y=mpg,x=factor(am)))+geom_point()+jitter(x = am)
g<-ggplot(data=mtcars,aes(y=mpg,x=factor(am)))+geom_point()+jitter(x = mtcars$am)
g<-ggplot(data=mtcars,aes(y=mpg,x=factor(am)))+geom_point()+geom_smooth()
g
g<-ggplot(data=mtcars,aes(y=mpg,x=factor(am)))+geom_point()+geom_smooth()
g
g<-ggplot(data=mtcars,aes(y=mpg,x=factor(am)))+geom_point()+geom_smooth(method=lm)
g
g<-ggplot(data=mtcars,aes(y=mpg,x=wt)+geom_point()+geom_smooth(method=lm)
g<-ggplot(data=mtcars,aes(y=mpg,x=wt))+geom_point()+geom_smooth(method=lm)
g
g<-ggplot(data=mtcars,aes(y=mpg,x=factor(am)))+geom_point()+geom_smooth(method=lm)
g
g<-ggplot(data=mtcars,aes(y=mpg,x=am))+geom_point()+geom_smooth(method=lm)
g
DataDirectory <- "../data/"
library(caret)
library(rpart)
library(randomForest)
library(rpart.plot)
library(rattle)
trainurl<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testurl<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DataDirectory <- "../data/"
DataDirectory <- "../data/pml-training.csv"
file.exists(DataDirectory)
file.exists("../data")
setwd("~/datascience/pmlproject")
file.exists("../data")
DataDirectory <- "../data/pml-training.csv"
file.exists(DataDirectory)
setwd("~/datascience/pmlproject")
trainurl<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testurl<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DataDirectory <- "../data/pml-training.csv"
dataFile <- "dataset.RData"
if (!file.exists(dataFile)) {
download.file(trainurl,destfile=DataDirectory,quiet=TRUE,mode="wb")
}
setwd("~/datascience/pmlproject")
trainurl<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testurl<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DataDirectory <- "../data/pml-training.csv"
dataFile <- "dataset.RData"
if (!file.exists(dataFile)) {
download.file(trainurl,destfile=DataDirectory,quiet=TRUE,mode="wb")
}
if (!file.exists(dataFile)) {
download.file(trainurl,destfile=DataDirectory,quiet=FALSE,mode="wb")
}
DataDirectory <- "../data/pml-testing.csv"
if (!file.exists(DataDirectory)) {
download.file(trainurl,destfile=DataDirectory,quiet=FALSE,mode="wb")
}
DataDirectory <- "../data/pml-testing.csv"
if (!file.exists(DataDirectory)) {
download.file(trainurl,destfile=DataDirectory,quiet=FALSE,mode="wb")
}
DataDirectory
DataDirectory <- "../data/pml-testing.csv"
if (!file.exists(DataDirectory)) {
download.file(testurl,destfile=DataDirectory,quiet=FALSE,mode="wb")
}
DataDirectory <- "../data/pml-testing.csv"
if (!file.exists(DataDirectory)) {
download.file(testurl,destfile=DataDirectory,quiet=TRUE,mode="wb")
}
traindata <- read.csv((trainfile), na.strings=c("NA","#DIV/0!",""))
trainfile <- "../data/pml-training.csv"
traindata <- read.csv((trainfile), na.strings=c("NA","#DIV/0!",""))
testdata <- read.csv((testfile), na.strings=c("NA","#DIV/0!",""))
testfile <- "../data/pml-testing.csv"
testdata <- read.csv((testfile), na.strings=c("NA","#DIV/0!",""))
set.seed(123)
selecttrain<-createDataPartition(y=traindata$classe,p=0.8)
sum(selecttrain)
head(selecttrain)
mytrain<-traindata[selecttrain]
selecttrain<-createDataPartition(y=traindata$classe,p=0.8,list=FALSE)
mytrain<-traindata[selecttrain]
mytest<-traindata[-selecttrain]
mytrain<-traindata[selecttrain,]
mytest<-traindata[-selecttrain,]
selecttrain<-createDataPartition(y=traindata$classe,p=0.8,list=TRUE)
mytrain<-traindata[selecttrain,]
selecttrain<-createDataPartition(y=traindata$classe,p=0.8,list=FALSE)
myDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)
myDataNZV <- nearZeroVar(mytrain, saveMetrics=TRUE)
View(myDataNZV)
?nearZeroVar
dim(mytrain)
nzv <- nearZeroVar(mytrain, saveMetrics=TRUE)
sum(nzv$percentUnique>5)
sum(nzv$percentUnique>2)
sum(nzv$percentUnique>1)
sum(nzv$percentUnique>1.5)
apply(mytrain,2,is.na)
apply(mytrain,2,sum(is.na)
)
nacheck<-apply(mytrain,2,sum(is.na))
nacheck<-apply(mytrain,2,is.na)
nasum<-apply(nacheck,2,sum)
nasum
nasum/15699
nzv
View(nzv)
nzv[nzv$percentUnique==0,]
nzv[nzv$percentUnique==0|nzv$percentUnique==100,]
nzv[nzv$percentUnique==0|nzv$percentUnique==100,0]
nzv[nzv$percentUnique==0|nzv$percentUnique==100,1]
row.names(nzv[nzv$percentUnique==0|nzv$percentUnique==100,])
mytrain(1:5,row.names(nzv[nzv$percentUnique==0|nzv$percentUnique==100,]))
mytrain[1:5,row.names(nzv[nzv$percentUnique==0|nzv$percentUnique==100,])]
nasum
nasum==15699
mytrain[1:5,row.names(nzv[nzv$percentUnique==0|nzv$percentUnique==100,])]
mytrain[1:5,-row.names(nzv[nzv$percentUnique==0|nzv$percentUnique==100,])]
mytrain[1:5,row.names(nzv[nzv$percentUnique>0&nzv$percentUnique<100,])]
mytrainclean<-mytrain[,row.names(nzv[nzv$percentUnique>0&nzv$percentUnique<100,])]
mytrain[1:5,row.names(nzv[nzv$percentUnique>0&nzv$percentUnique<100,])]
colnames(mytrain)
colnames(mytrainclean)
mytestclean<-mytest[,colnames(mytrainclean)]
dim(mytrainclean)
dim(mytraintest)
dim(mytestclean)
modFitA1 <- rpart(classe ~ ., data=mytrainclean, method="class")
fancyRpartPlot(modFitA1)
predictionsA1 <- predict(modFitA1, mytestclean, type = "class")
confusionMatrix(predictionsA1, mytestclean$classe)
library(e1071)
install.packages("e1071")
confusionMatrix(predictionsA1, mytestclean$classe)
model1 <- train(classe ~ ., data=mytrainclean, method="class")
model1 <- train(classe ~ ., data=mytrainclean, method="rpart")
confusionMatrix(model1, mytestclean$classe)
model1 <- rpart(classe ~ ., data=mytrainclean, method="class")
confusionMatrix(model1, mytestclean$classe)
prediction1 <- predict(model1, mytestclean, type = "class")
confusionMatrix(prediction1, mytestclean$classe)
?rpart
model2 <- train(classe ~ ., data=mytrainclean, method="randomForest")
model2 <- train(classe ~ ., data=mytrainclean, method="randomforest")
?train
model2 <- train(classe ~ ., data=mytrainclean, method="rf")
prediction2 <- predict(model2, mytestclean, type = "class")
prediction2 <- predict(model2, mytestclean, type = "raw")
confusionMatrix(prediction2, mytestclean$classe)
fancyRpartPlot(model2)
prediction2 <- predict(model2, mytestclean, type = "raw")
confusionMatrix(prediction2, mytestclean$classe)
length(prediction2)
length(mytestclean$classe)
length(prediction1)
prediction2 <- predict(model2, mytestclean, type = "")
prediction2 <- predict(model2, mytestclean, type = "prob")
?predict
prediction2 <- predict(model2, mytestclean)
length(prediction2)
class(mytestclean)
apply(mytestclean,2,class)
apply(mytestclean,2,class)==apply(mytrainclean,2,class)
length(prediction2)
prediction2
prediction1 <- predict(model1, mytestclean, type = "raw")
prediction1 <- predict(model1, mytestclean, type = "prob")
length(prediction1)
prediction1
prediction1 <- predict(model1, mytestclean, type = "raw")
model2 <- randomForest(classe ~. , data=mytrainclean)
View(nacheck)
nacheck<-apply(mytrainclean,2,is.na)
nasum<-apply(nacheck,2,sum)
naprop<-nasum/length(nasum)
naprop
naprop<-nasum/nrow(mytrainclean)
naprop
sum(naprop>.97)
sum(naprop>.98)
sum(naprop>.97)
model1 <- train(classe ~ ., data=mytrainclean, method="rpart")
prediction1 <- predict(model1, mytestclean, type = "raw")
confusionMatrix(prediction1, mytestclean$classe)
prediction1
prediction1 <- predict(model1, mytestclean, type = "class")
prediction1 <- predict(model1, mytestclean, type = "raw")
prediction1
model1 <- rpart(classe ~ ., data=mytrainclean, method="class")
prediction1 <- predict(model1, mytestclean, type = "raw")
prediction1 <- predict(model1, mytestclean, type = "class")
length(prediction1)
confusionMatrix(prediction1, mytestclean$classe)
model2 <- randomForest(classe ~. , data=mytrainclean)
model2 <- randomForest(as.factor(classe) ~. , data=mytrainclean)
model2 <- randomForest(factor(classe) ~. , data=mytrainclean)
mytrainclean
sum(is.na(mytrainclean$classe))
model2 <- randomForest(factor(classe) ~. , data=mytrainclean)
model1 <- train(classe ~ ., data=mytrainclean, method="rpart")
prediction1 <- predict(model1, mytestclean, type = "class")
prediction1 <- predict(model1, mytestclean, type = "raw")
length(prediction1)
prediction1 <- predict(model1, mytestclean, type = "raw")
prediction1 <- predict(model1, mytestclean, type = "prob")
length(prediction1)
prediction1 <- predict(model1, mytestclean, type = "raw")
length(prediction1)
model1 <- train(classe ~ ., data=mytrainclean, method="cart")
model1 <- train(classe ~ ., data=mytrainclean, method="CART")
?rpart
model1 <- rpart(classe ~ ., data=mytrainclean, method="class")
prediction1 <- predict(model1, mytestclean, type = "class")
length(prediction1)
confusionMatrix(prediction1, mytestclean$classe)
?randomForest
model2 <- randomForest(classe ~. , data=mytrainclean)
model2<-train(classe~.,data=mytrainclean,method="adaboost")
model2<-train(classe~.,data=mytrainclean,method="adaboost")
?adaboost
model2<-adaboost(classe~.,data=mytrainclean)
model2<-adaboost(classe~.,data=mytrainclean,method="class")
model2<-train(classe~.,data=mytrainclean,method="xgbTree")
model2<-train(classe~.,data=mytrainclean,method="xgbTree")
prediction2 <- predict(model2, mytestclean, type = "class")
prediction2 <- predict(model2, mytestclean, type = "raw")
length(prediction2)
mytestclean[46,]
mytestclean[45,]
?rfImpute
dim(mytrainclean)
mytraincleanrfimpute<-rfImpute(classe~.,data=mytrainclean)
mytraincleanrfimpute<-rfImpute(classe~.,data=mytrainclean,iter=5)
naprop
sum(naprop<.6)
sum(naprop<.9)
sum(naprop<.95)
naprop[naprop<.95]
sum(naprop<.96)
sum(naprop<.97)
sum(naprop<.98)
nacheck<-apply(mytrainclean,2,is.na)
nasum<-apply(nacheck,2,sum)
sum(naprop<.97)
colnames(naprop[naprop<.95])
rownames(naprop[naprop<.95])
names(naprop[naprop<.95])
naprop<-nasum/nrow(mytrainclean)
naprop<-nasum/nrow(mytrainclean)
naprop<-nasum/nrow(mytrainclean)
sum(naprop<.97)
mytrainclean<-mytest[,names(naprop[naprop<.95])]
dim(mytrainclean)
mytrainclean<-mytrain[,row.names(nzv[nzv$percentUnique>0&nzv$percentUnique<100,])]
nacheck<-apply(mytrainclean,2,is.na)
naprop<-nasum/nrow(mytrainclean)
mytrainclean<-mytrainclean[,names(naprop[naprop<.95])]
dim(mytrainclean)
mytestclean<-mytest[,colnames(mytrainclean)]
dim(mytrainclean)
dim(mytestclean)
model1 <- rpart(classe ~ ., data=mytrainclean, method="class")
fancyRpartPlot(model1)
prediction1 <- predict(model1, mytestclean, type = "class")
confusionMatrix(prediction1, mytestclean$classe)
model2 <- randomForest(classe ~. , data=mytrainclean)
prediction2 <- predict(model2, mytestclean, type = "class")
confusionMatrix(prediction2, mytestclean$classe)
confusionMatrix(prediction2, mytestclean$classe)
fancyRpartPlot(model2)
prediction3 <- predict(model2, testdata, type = "class")
dim(testdata)
testfinal<-testdata[,colnames(mytrainclean)]
mytestclean<-mytest[,colnames(mytrainclean[-58])]
dim(tesyfinal)
dim(testfinal)
testfinal<-testdata[,colnames(mytrainclean)]
testfinal<-testdata[,colnames(mytrainclean[-58])]
dim(testdata)
names(testdata)
names(mytrainclean)
testfinal<-testdata[,colnames(mytrainclean[-59])]
dim(mytrainclean)
dim(mytestclean)
dim(testfinal)
mytestclean<-mytest[,colnames(mytrainclean)]
dim(mytestclean)
prediction3<-predict(model2,testfinal,type="class")
confusionMatrix(prediction2, mytest$classe)
model1 <- rpart(classe ~ ., data=mytrainclean[-59], method="class")
model1 <- rpart(mytrain$classe ~ ., data=mytrainclean, method="class")
fancyRpartPlot(model1)
prediction1 <- predict(model1, mytestclean, type = "class")
confusionMatrix(prediction1, mytest$classe)
prediction3<-predict(model1,testfinal,type="class")
confusionMatrix(prediction3,testfinal$classe)
length(prediction3)
model2 <- randomForest(mytrain$classe ~. , data=mytrainclean)
prediction2 <- predict(model2, mytestclean, type = "class")
confusionMatrix(prediction2, mytest$classe)
prediction3<-predict(model2,testfinal,type="class")
dim(testfinal)
dim(mytrainclean)
model1 <- rpart(mytrain$classe ~ ., data=mytrainclean[-59], method="class")
fancyRpartPlot(model1)
prediction1 <- predict(model1, mytestclean, type = "class")
confusionMatrix(prediction1, mytest$classe)
model2 <- randomForest(mytrain$classe ~. , data=mytrainclean[-59])
prediction2 <- predict(model2, mytestclean, type = "class")
confusionMatrix(prediction2, mytest$classe)
prediction3<-predict(model2,testfinal,type="class")
prediction3<-predict(model2,cbind(testfinal,rep(0,20)),type="class")
names(testfinal)
prediction3<-predict(model2,cbind(testfinal,classe=rep(0,20)),type="class")
names(mytestclean)
cbind(testfinal,classe=rep(0,20))
cbind(testfinal,classe=rep("A",20))
prediction3<-predict(model2,cbind(testfinal,classe=rep("A",20)),type="class")
aclass<-apply(testdata,2,names)
aclass
aclass<-apply(testdata,2,class)
aclass
aclass<-apply(testfinal,2,class)
aclass
aclass<-apply(mytestclean,2,class)
aclass<-apply(testfinal,2,class)
bclass<-apply(mytestclean,2,class)
bclass
summary(testdata)
apply(mytestclean,2,class)
class(testdata[,1])
class(testdata[,2])
str(testdata)
prediction3<-predict(model2,cbind(testfinal,classe=rep("A",20)),type="class")
prediction3<-predict(model1,cbind(testfinal,classe=rep("A",20)),type="class")
levels(test$SectionName) <- levels(train$SectionName)
str(mytrainclean)
rep(c("a","b","c"),10)
str(testfinal)
levels(testfinal$cvtd_timestamp)
levels(testfinal$cvtd_timestamp)<-levels(mytrainclean$cvtd_timestamp)
levels(testfinal$cvtd_timestamp)
str(mytrainclean)
levels(testfinal$new_window)<-levels(mytrainclean$new_window)
prediction3<-predict(model2,cbind(testfinal,classe=rep("A",20)),type="class")
prediction3<-predict(model2,testfinal,type="class")
length(testfinal)
length(prediction3)
prediction3
prediction3<-predict(model1,testfinal,type="class")
confusionMatrix(prediction3,testfinal$classe)
levels(testfinal$cvtd_timestamp)<-levels(mytrainclean$cvtd_timestamp)
levels(testfinal$new_window)<-levels(mytrainclean$new_window)
prediction4<-predict(model2,testfinal,type="class")
confusionMatrix(prediction3,testfinal$classe)
confusionMatrix(prediction4,testfinal$classe)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
prediction3<-predict(model2,cbind(testfinal,classe=rep("A",20)),type="class")
confusionMatrix(prediction3,testfinal$classe)
str(testfinal)
str(mytrainclean)
prediction3<-predict(model1,testfinal,type="class")
confusionMatrix(prediction3,testfinal$classe)
confusionMatrix(prediction1, mytest$classe)
model1 <- rpart(mytrain$classe ~ ., data=mytrainclean, method="class")
prediction1 <- predict(model1, mytestclean, type = "class")
confusionMatrix(prediction1, mytest$classe)
prediction3<-predict(model1,testfinal,type="class")
model2 <- randomForest(mytrain$classe ~. , data=mytrainclean)
levels(testfinal$cvtd_timestamp)<-levels(mytrainclean$cvtd_timestamp)
levels(testfinal$new_window)<-levels(mytrainclean$new_window)
prediction4<-predict(model2,testfinal,type="class")
model1 <- rpart(classe ~ ., data=mytrainclean, method="class")
fancyRpartPlot(model1)
prediction1 <- predict(model1, mytestclean, type = "class")
confusionMatrix(prediction1, mytest$classe)
confusionMatrix(prediction1, mytest$classe)
foo<-confusionMatrix(prediction1, mytest$classe)
names(foo)
foo$table
foo$overall
foo$overall$Accuracy
names(foo$overall)
foo$overall["Accuracy"]
prediction1 <- predict(model1, mytestclean, type = "class")
confusionMatrix(prediction1, mytest$classe)
accuracy1<-confusionMatrix(prediction1, mytest$classe)$overall["Accuracy"]
accuracy1
accuracy1<-confusionMatrix(prediction1, mytest$classe)$overall["Accuracy"]*100
accuary1
accuracy1
oose1<-100-accuracy1
oose1
dim(traindata)
